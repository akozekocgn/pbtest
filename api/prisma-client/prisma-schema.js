module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.3). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type Address {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  street: String
  suite: String
  city: String
  zipcode: String
  geo: Json
}

type AddressConnection {
  pageInfo: PageInfo!
  edges: [AddressEdge]!
  aggregate: AggregateAddress!
}

input AddressCreateInput {
  id: Int
  street: String
  suite: String
  city: String
  zipcode: String
  geo: Json
}

input AddressCreateOneInput {
  create: AddressCreateInput
  connect: AddressWhereUniqueInput
}

type AddressEdge {
  node: Address!
  cursor: String!
}

enum AddressOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  street_ASC
  street_DESC
  suite_ASC
  suite_DESC
  city_ASC
  city_DESC
  zipcode_ASC
  zipcode_DESC
  geo_ASC
  geo_DESC
}

type AddressPreviousValues {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  street: String
  suite: String
  city: String
  zipcode: String
  geo: Json
}

type AddressSubscriptionPayload {
  mutation: MutationType!
  node: Address
  updatedFields: [String!]
  previousValues: AddressPreviousValues
}

input AddressSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AddressWhereInput
  AND: [AddressSubscriptionWhereInput!]
  OR: [AddressSubscriptionWhereInput!]
  NOT: [AddressSubscriptionWhereInput!]
}

input AddressUpdateDataInput {
  street: String
  suite: String
  city: String
  zipcode: String
  geo: Json
}

input AddressUpdateInput {
  street: String
  suite: String
  city: String
  zipcode: String
  geo: Json
}

input AddressUpdateManyMutationInput {
  street: String
  suite: String
  city: String
  zipcode: String
  geo: Json
}

input AddressUpdateOneInput {
  create: AddressCreateInput
  update: AddressUpdateDataInput
  upsert: AddressUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: AddressWhereUniqueInput
}

input AddressUpsertNestedInput {
  update: AddressUpdateDataInput!
  create: AddressCreateInput!
}

input AddressWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  street: String
  street_not: String
  street_in: [String!]
  street_not_in: [String!]
  street_lt: String
  street_lte: String
  street_gt: String
  street_gte: String
  street_contains: String
  street_not_contains: String
  street_starts_with: String
  street_not_starts_with: String
  street_ends_with: String
  street_not_ends_with: String
  suite: String
  suite_not: String
  suite_in: [String!]
  suite_not_in: [String!]
  suite_lt: String
  suite_lte: String
  suite_gt: String
  suite_gte: String
  suite_contains: String
  suite_not_contains: String
  suite_starts_with: String
  suite_not_starts_with: String
  suite_ends_with: String
  suite_not_ends_with: String
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  zipcode: String
  zipcode_not: String
  zipcode_in: [String!]
  zipcode_not_in: [String!]
  zipcode_lt: String
  zipcode_lte: String
  zipcode_gt: String
  zipcode_gte: String
  zipcode_contains: String
  zipcode_not_contains: String
  zipcode_starts_with: String
  zipcode_not_starts_with: String
  zipcode_ends_with: String
  zipcode_not_ends_with: String
  AND: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
}

input AddressWhereUniqueInput {
  id: Int
}

type AggregateAddress {
  count: Int!
}

type AggregateCompany {
  count: Int!
}

type AggregateProject {
  count: Int!
}

type AggregateTask {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Company {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  type: String
  bs: String
}

type CompanyConnection {
  pageInfo: PageInfo!
  edges: [CompanyEdge]!
  aggregate: AggregateCompany!
}

input CompanyCreateInput {
  id: Int
  name: String
  type: String
  bs: String
}

input CompanyCreateOneInput {
  create: CompanyCreateInput
  connect: CompanyWhereUniqueInput
}

type CompanyEdge {
  node: Company!
  cursor: String!
}

enum CompanyOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  type_ASC
  type_DESC
  bs_ASC
  bs_DESC
}

type CompanyPreviousValues {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  type: String
  bs: String
}

type CompanySubscriptionPayload {
  mutation: MutationType!
  node: Company
  updatedFields: [String!]
  previousValues: CompanyPreviousValues
}

input CompanySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CompanyWhereInput
  AND: [CompanySubscriptionWhereInput!]
  OR: [CompanySubscriptionWhereInput!]
  NOT: [CompanySubscriptionWhereInput!]
}

input CompanyUpdateDataInput {
  name: String
  type: String
  bs: String
}

input CompanyUpdateInput {
  name: String
  type: String
  bs: String
}

input CompanyUpdateManyMutationInput {
  name: String
  type: String
  bs: String
}

input CompanyUpdateOneInput {
  create: CompanyCreateInput
  update: CompanyUpdateDataInput
  upsert: CompanyUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: CompanyWhereUniqueInput
}

input CompanyUpsertNestedInput {
  update: CompanyUpdateDataInput!
  create: CompanyCreateInput!
}

input CompanyWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  bs: String
  bs_not: String
  bs_in: [String!]
  bs_not_in: [String!]
  bs_lt: String
  bs_lte: String
  bs_gt: String
  bs_gte: String
  bs_contains: String
  bs_not_contains: String
  bs_starts_with: String
  bs_not_starts_with: String
  bs_ends_with: String
  bs_not_ends_with: String
  AND: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  NOT: [CompanyWhereInput!]
}

input CompanyWhereUniqueInput {
  id: Int
}

scalar DateTime

scalar Json

scalar Long

type Mutation {
  createAddress(data: AddressCreateInput!): Address!
  updateAddress(data: AddressUpdateInput!, where: AddressWhereUniqueInput!): Address
  updateManyAddresses(data: AddressUpdateManyMutationInput!, where: AddressWhereInput): BatchPayload!
  upsertAddress(where: AddressWhereUniqueInput!, create: AddressCreateInput!, update: AddressUpdateInput!): Address!
  deleteAddress(where: AddressWhereUniqueInput!): Address
  deleteManyAddresses(where: AddressWhereInput): BatchPayload!
  createCompany(data: CompanyCreateInput!): Company!
  updateCompany(data: CompanyUpdateInput!, where: CompanyWhereUniqueInput!): Company
  updateManyCompanies(data: CompanyUpdateManyMutationInput!, where: CompanyWhereInput): BatchPayload!
  upsertCompany(where: CompanyWhereUniqueInput!, create: CompanyCreateInput!, update: CompanyUpdateInput!): Company!
  deleteCompany(where: CompanyWhereUniqueInput!): Company
  deleteManyCompanies(where: CompanyWhereInput): BatchPayload!
  createProject(data: ProjectCreateInput!): Project!
  updateProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  updateManyProjects(data: ProjectUpdateManyMutationInput!, where: ProjectWhereInput): BatchPayload!
  upsertProject(where: ProjectWhereUniqueInput!, create: ProjectCreateInput!, update: ProjectUpdateInput!): Project!
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteManyProjects(where: ProjectWhereInput): BatchPayload!
  createTask(data: TaskCreateInput!): Task!
  updateTask(data: TaskUpdateInput!, where: TaskWhereUniqueInput!): Task
  updateManyTasks(data: TaskUpdateManyMutationInput!, where: TaskWhereInput): BatchPayload!
  upsertTask(where: TaskWhereUniqueInput!, create: TaskCreateInput!, update: TaskUpdateInput!): Task!
  deleteTask(where: TaskWhereUniqueInput!): Task
  deleteManyTasks(where: TaskWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Project {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  active: Boolean!
  title: String!
  description: String
  owner: User!
  members(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type ProjectConnection {
  pageInfo: PageInfo!
  edges: [ProjectEdge]!
  aggregate: AggregateProject!
}

input ProjectCreateInput {
  id: Int
  active: Boolean
  title: String!
  description: String
  owner: UserCreateOneWithoutOwned_projectsInput!
  members: UserCreateManyWithoutParticipated_projectsInput
}

input ProjectCreateManyWithoutMembersInput {
  create: [ProjectCreateWithoutMembersInput!]
  connect: [ProjectWhereUniqueInput!]
}

input ProjectCreateManyWithoutOwnerInput {
  create: [ProjectCreateWithoutOwnerInput!]
  connect: [ProjectWhereUniqueInput!]
}

input ProjectCreateWithoutMembersInput {
  id: Int
  active: Boolean
  title: String!
  description: String
  owner: UserCreateOneWithoutOwned_projectsInput!
}

input ProjectCreateWithoutOwnerInput {
  id: Int
  active: Boolean
  title: String!
  description: String
  members: UserCreateManyWithoutParticipated_projectsInput
}

type ProjectEdge {
  node: Project!
  cursor: String!
}

enum ProjectOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  active_ASC
  active_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
}

type ProjectPreviousValues {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  active: Boolean!
  title: String!
  description: String
}

input ProjectScalarWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  active: Boolean
  active_not: Boolean
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  AND: [ProjectScalarWhereInput!]
  OR: [ProjectScalarWhereInput!]
  NOT: [ProjectScalarWhereInput!]
}

type ProjectSubscriptionPayload {
  mutation: MutationType!
  node: Project
  updatedFields: [String!]
  previousValues: ProjectPreviousValues
}

input ProjectSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProjectWhereInput
  AND: [ProjectSubscriptionWhereInput!]
  OR: [ProjectSubscriptionWhereInput!]
  NOT: [ProjectSubscriptionWhereInput!]
}

input ProjectUpdateInput {
  active: Boolean
  title: String
  description: String
  owner: UserUpdateOneRequiredWithoutOwned_projectsInput
  members: UserUpdateManyWithoutParticipated_projectsInput
}

input ProjectUpdateManyDataInput {
  active: Boolean
  title: String
  description: String
}

input ProjectUpdateManyMutationInput {
  active: Boolean
  title: String
  description: String
}

input ProjectUpdateManyWithoutMembersInput {
  create: [ProjectCreateWithoutMembersInput!]
  delete: [ProjectWhereUniqueInput!]
  connect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  disconnect: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutMembersInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutMembersInput!]
  deleteMany: [ProjectScalarWhereInput!]
  updateMany: [ProjectUpdateManyWithWhereNestedInput!]
}

input ProjectUpdateManyWithoutOwnerInput {
  create: [ProjectCreateWithoutOwnerInput!]
  delete: [ProjectWhereUniqueInput!]
  connect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  disconnect: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutOwnerInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutOwnerInput!]
  deleteMany: [ProjectScalarWhereInput!]
  updateMany: [ProjectUpdateManyWithWhereNestedInput!]
}

input ProjectUpdateManyWithWhereNestedInput {
  where: ProjectScalarWhereInput!
  data: ProjectUpdateManyDataInput!
}

input ProjectUpdateWithoutMembersDataInput {
  active: Boolean
  title: String
  description: String
  owner: UserUpdateOneRequiredWithoutOwned_projectsInput
}

input ProjectUpdateWithoutOwnerDataInput {
  active: Boolean
  title: String
  description: String
  members: UserUpdateManyWithoutParticipated_projectsInput
}

input ProjectUpdateWithWhereUniqueWithoutMembersInput {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateWithoutMembersDataInput!
}

input ProjectUpdateWithWhereUniqueWithoutOwnerInput {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateWithoutOwnerDataInput!
}

input ProjectUpsertWithWhereUniqueWithoutMembersInput {
  where: ProjectWhereUniqueInput!
  update: ProjectUpdateWithoutMembersDataInput!
  create: ProjectCreateWithoutMembersInput!
}

input ProjectUpsertWithWhereUniqueWithoutOwnerInput {
  where: ProjectWhereUniqueInput!
  update: ProjectUpdateWithoutOwnerDataInput!
  create: ProjectCreateWithoutOwnerInput!
}

input ProjectWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  active: Boolean
  active_not: Boolean
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  owner: UserWhereInput
  members_every: UserWhereInput
  members_some: UserWhereInput
  members_none: UserWhereInput
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
}

input ProjectWhereUniqueInput {
  id: Int
}

type Query {
  address(where: AddressWhereUniqueInput!): Address
  addresses(where: AddressWhereInput, orderBy: AddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Address]!
  addressesConnection(where: AddressWhereInput, orderBy: AddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AddressConnection!
  company(where: CompanyWhereUniqueInput!): Company
  companies(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Company]!
  companiesConnection(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CompanyConnection!
  project(where: ProjectWhereUniqueInput!): Project
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project]!
  projectsConnection(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectConnection!
  task(where: TaskWhereUniqueInput!): Task
  tasks(where: TaskWhereInput, orderBy: TaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Task]!
  tasksConnection(where: TaskWhereInput, orderBy: TaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TaskConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  address(where: AddressSubscriptionWhereInput): AddressSubscriptionPayload
  company(where: CompanySubscriptionWhereInput): CompanySubscriptionPayload
  project(where: ProjectSubscriptionWhereInput): ProjectSubscriptionPayload
  task(where: TaskSubscriptionWhereInput): TaskSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Task {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  finished: Boolean!
  title: String!
  description: String
  author: User!
  members(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type TaskConnection {
  pageInfo: PageInfo!
  edges: [TaskEdge]!
  aggregate: AggregateTask!
}

input TaskCreateInput {
  id: Int
  finished: Boolean
  title: String!
  description: String
  author: UserCreateOneWithoutOwned_tasksInput!
  members: UserCreateManyWithoutAssigned_tasksInput
}

input TaskCreateManyWithoutAuthorInput {
  create: [TaskCreateWithoutAuthorInput!]
  connect: [TaskWhereUniqueInput!]
}

input TaskCreateManyWithoutMembersInput {
  create: [TaskCreateWithoutMembersInput!]
  connect: [TaskWhereUniqueInput!]
}

input TaskCreateWithoutAuthorInput {
  id: Int
  finished: Boolean
  title: String!
  description: String
  members: UserCreateManyWithoutAssigned_tasksInput
}

input TaskCreateWithoutMembersInput {
  id: Int
  finished: Boolean
  title: String!
  description: String
  author: UserCreateOneWithoutOwned_tasksInput!
}

type TaskEdge {
  node: Task!
  cursor: String!
}

enum TaskOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  finished_ASC
  finished_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
}

type TaskPreviousValues {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  finished: Boolean!
  title: String!
  description: String
}

input TaskScalarWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  finished: Boolean
  finished_not: Boolean
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  AND: [TaskScalarWhereInput!]
  OR: [TaskScalarWhereInput!]
  NOT: [TaskScalarWhereInput!]
}

type TaskSubscriptionPayload {
  mutation: MutationType!
  node: Task
  updatedFields: [String!]
  previousValues: TaskPreviousValues
}

input TaskSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TaskWhereInput
  AND: [TaskSubscriptionWhereInput!]
  OR: [TaskSubscriptionWhereInput!]
  NOT: [TaskSubscriptionWhereInput!]
}

input TaskUpdateInput {
  finished: Boolean
  title: String
  description: String
  author: UserUpdateOneRequiredWithoutOwned_tasksInput
  members: UserUpdateManyWithoutAssigned_tasksInput
}

input TaskUpdateManyDataInput {
  finished: Boolean
  title: String
  description: String
}

input TaskUpdateManyMutationInput {
  finished: Boolean
  title: String
  description: String
}

input TaskUpdateManyWithoutAuthorInput {
  create: [TaskCreateWithoutAuthorInput!]
  delete: [TaskWhereUniqueInput!]
  connect: [TaskWhereUniqueInput!]
  set: [TaskWhereUniqueInput!]
  disconnect: [TaskWhereUniqueInput!]
  update: [TaskUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [TaskUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [TaskScalarWhereInput!]
  updateMany: [TaskUpdateManyWithWhereNestedInput!]
}

input TaskUpdateManyWithoutMembersInput {
  create: [TaskCreateWithoutMembersInput!]
  delete: [TaskWhereUniqueInput!]
  connect: [TaskWhereUniqueInput!]
  set: [TaskWhereUniqueInput!]
  disconnect: [TaskWhereUniqueInput!]
  update: [TaskUpdateWithWhereUniqueWithoutMembersInput!]
  upsert: [TaskUpsertWithWhereUniqueWithoutMembersInput!]
  deleteMany: [TaskScalarWhereInput!]
  updateMany: [TaskUpdateManyWithWhereNestedInput!]
}

input TaskUpdateManyWithWhereNestedInput {
  where: TaskScalarWhereInput!
  data: TaskUpdateManyDataInput!
}

input TaskUpdateWithoutAuthorDataInput {
  finished: Boolean
  title: String
  description: String
  members: UserUpdateManyWithoutAssigned_tasksInput
}

input TaskUpdateWithoutMembersDataInput {
  finished: Boolean
  title: String
  description: String
  author: UserUpdateOneRequiredWithoutOwned_tasksInput
}

input TaskUpdateWithWhereUniqueWithoutAuthorInput {
  where: TaskWhereUniqueInput!
  data: TaskUpdateWithoutAuthorDataInput!
}

input TaskUpdateWithWhereUniqueWithoutMembersInput {
  where: TaskWhereUniqueInput!
  data: TaskUpdateWithoutMembersDataInput!
}

input TaskUpsertWithWhereUniqueWithoutAuthorInput {
  where: TaskWhereUniqueInput!
  update: TaskUpdateWithoutAuthorDataInput!
  create: TaskCreateWithoutAuthorInput!
}

input TaskUpsertWithWhereUniqueWithoutMembersInput {
  where: TaskWhereUniqueInput!
  update: TaskUpdateWithoutMembersDataInput!
  create: TaskCreateWithoutMembersInput!
}

input TaskWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  finished: Boolean
  finished_not: Boolean
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  author: UserWhereInput
  members_every: UserWhereInput
  members_some: UserWhereInput
  members_none: UserWhereInput
  AND: [TaskWhereInput!]
  OR: [TaskWhereInput!]
  NOT: [TaskWhereInput!]
}

input TaskWhereUniqueInput {
  id: Int
}

type User {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  username: String!
  name: String
  phone: String
  website: String
  address: Address
  company: Company
  owned_projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project!]
  participated_projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project!]
  owned_tasks(where: TaskWhereInput, orderBy: TaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Task!]
  assigned_tasks(where: TaskWhereInput, orderBy: TaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Task!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: Int
  email: String!
  username: String!
  name: String
  phone: String
  website: String
  address: AddressCreateOneInput
  company: CompanyCreateOneInput
  owned_projects: ProjectCreateManyWithoutOwnerInput
  participated_projects: ProjectCreateManyWithoutMembersInput
  owned_tasks: TaskCreateManyWithoutAuthorInput
  assigned_tasks: TaskCreateManyWithoutMembersInput
}

input UserCreateManyWithoutAssigned_tasksInput {
  create: [UserCreateWithoutAssigned_tasksInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutParticipated_projectsInput {
  create: [UserCreateWithoutParticipated_projectsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutOwned_projectsInput {
  create: UserCreateWithoutOwned_projectsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutOwned_tasksInput {
  create: UserCreateWithoutOwned_tasksInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutAssigned_tasksInput {
  id: Int
  email: String!
  username: String!
  name: String
  phone: String
  website: String
  address: AddressCreateOneInput
  company: CompanyCreateOneInput
  owned_projects: ProjectCreateManyWithoutOwnerInput
  participated_projects: ProjectCreateManyWithoutMembersInput
  owned_tasks: TaskCreateManyWithoutAuthorInput
}

input UserCreateWithoutOwned_projectsInput {
  id: Int
  email: String!
  username: String!
  name: String
  phone: String
  website: String
  address: AddressCreateOneInput
  company: CompanyCreateOneInput
  participated_projects: ProjectCreateManyWithoutMembersInput
  owned_tasks: TaskCreateManyWithoutAuthorInput
  assigned_tasks: TaskCreateManyWithoutMembersInput
}

input UserCreateWithoutOwned_tasksInput {
  id: Int
  email: String!
  username: String!
  name: String
  phone: String
  website: String
  address: AddressCreateOneInput
  company: CompanyCreateOneInput
  owned_projects: ProjectCreateManyWithoutOwnerInput
  participated_projects: ProjectCreateManyWithoutMembersInput
  assigned_tasks: TaskCreateManyWithoutMembersInput
}

input UserCreateWithoutParticipated_projectsInput {
  id: Int
  email: String!
  username: String!
  name: String
  phone: String
  website: String
  address: AddressCreateOneInput
  company: CompanyCreateOneInput
  owned_projects: ProjectCreateManyWithoutOwnerInput
  owned_tasks: TaskCreateManyWithoutAuthorInput
  assigned_tasks: TaskCreateManyWithoutMembersInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  email_ASC
  email_DESC
  username_ASC
  username_DESC
  name_ASC
  name_DESC
  phone_ASC
  phone_DESC
  website_ASC
  website_DESC
}

type UserPreviousValues {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  username: String!
  name: String
  phone: String
  website: String
}

input UserScalarWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  website: String
  website_not: String
  website_in: [String!]
  website_not_in: [String!]
  website_lt: String
  website_lte: String
  website_gt: String
  website_gte: String
  website_contains: String
  website_not_contains: String
  website_starts_with: String
  website_not_starts_with: String
  website_ends_with: String
  website_not_ends_with: String
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  email: String
  username: String
  name: String
  phone: String
  website: String
  address: AddressUpdateOneInput
  company: CompanyUpdateOneInput
  owned_projects: ProjectUpdateManyWithoutOwnerInput
  participated_projects: ProjectUpdateManyWithoutMembersInput
  owned_tasks: TaskUpdateManyWithoutAuthorInput
  assigned_tasks: TaskUpdateManyWithoutMembersInput
}

input UserUpdateManyDataInput {
  email: String
  username: String
  name: String
  phone: String
  website: String
}

input UserUpdateManyMutationInput {
  email: String
  username: String
  name: String
  phone: String
  website: String
}

input UserUpdateManyWithoutAssigned_tasksInput {
  create: [UserCreateWithoutAssigned_tasksInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutAssigned_tasksInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutAssigned_tasksInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutParticipated_projectsInput {
  create: [UserCreateWithoutParticipated_projectsInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutParticipated_projectsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutParticipated_projectsInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredWithoutOwned_projectsInput {
  create: UserCreateWithoutOwned_projectsInput
  update: UserUpdateWithoutOwned_projectsDataInput
  upsert: UserUpsertWithoutOwned_projectsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutOwned_tasksInput {
  create: UserCreateWithoutOwned_tasksInput
  update: UserUpdateWithoutOwned_tasksDataInput
  upsert: UserUpsertWithoutOwned_tasksInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutAssigned_tasksDataInput {
  email: String
  username: String
  name: String
  phone: String
  website: String
  address: AddressUpdateOneInput
  company: CompanyUpdateOneInput
  owned_projects: ProjectUpdateManyWithoutOwnerInput
  participated_projects: ProjectUpdateManyWithoutMembersInput
  owned_tasks: TaskUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutOwned_projectsDataInput {
  email: String
  username: String
  name: String
  phone: String
  website: String
  address: AddressUpdateOneInput
  company: CompanyUpdateOneInput
  participated_projects: ProjectUpdateManyWithoutMembersInput
  owned_tasks: TaskUpdateManyWithoutAuthorInput
  assigned_tasks: TaskUpdateManyWithoutMembersInput
}

input UserUpdateWithoutOwned_tasksDataInput {
  email: String
  username: String
  name: String
  phone: String
  website: String
  address: AddressUpdateOneInput
  company: CompanyUpdateOneInput
  owned_projects: ProjectUpdateManyWithoutOwnerInput
  participated_projects: ProjectUpdateManyWithoutMembersInput
  assigned_tasks: TaskUpdateManyWithoutMembersInput
}

input UserUpdateWithoutParticipated_projectsDataInput {
  email: String
  username: String
  name: String
  phone: String
  website: String
  address: AddressUpdateOneInput
  company: CompanyUpdateOneInput
  owned_projects: ProjectUpdateManyWithoutOwnerInput
  owned_tasks: TaskUpdateManyWithoutAuthorInput
  assigned_tasks: TaskUpdateManyWithoutMembersInput
}

input UserUpdateWithWhereUniqueWithoutAssigned_tasksInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutAssigned_tasksDataInput!
}

input UserUpdateWithWhereUniqueWithoutParticipated_projectsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutParticipated_projectsDataInput!
}

input UserUpsertWithoutOwned_projectsInput {
  update: UserUpdateWithoutOwned_projectsDataInput!
  create: UserCreateWithoutOwned_projectsInput!
}

input UserUpsertWithoutOwned_tasksInput {
  update: UserUpdateWithoutOwned_tasksDataInput!
  create: UserCreateWithoutOwned_tasksInput!
}

input UserUpsertWithWhereUniqueWithoutAssigned_tasksInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutAssigned_tasksDataInput!
  create: UserCreateWithoutAssigned_tasksInput!
}

input UserUpsertWithWhereUniqueWithoutParticipated_projectsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutParticipated_projectsDataInput!
  create: UserCreateWithoutParticipated_projectsInput!
}

input UserWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  website: String
  website_not: String
  website_in: [String!]
  website_not_in: [String!]
  website_lt: String
  website_lte: String
  website_gt: String
  website_gte: String
  website_contains: String
  website_not_contains: String
  website_starts_with: String
  website_not_starts_with: String
  website_ends_with: String
  website_not_ends_with: String
  address: AddressWhereInput
  company: CompanyWhereInput
  owned_projects_every: ProjectWhereInput
  owned_projects_some: ProjectWhereInput
  owned_projects_none: ProjectWhereInput
  participated_projects_every: ProjectWhereInput
  participated_projects_some: ProjectWhereInput
  participated_projects_none: ProjectWhereInput
  owned_tasks_every: TaskWhereInput
  owned_tasks_some: TaskWhereInput
  owned_tasks_none: TaskWhereInput
  assigned_tasks_every: TaskWhereInput
  assigned_tasks_some: TaskWhereInput
  assigned_tasks_none: TaskWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: Int
  email: String
  username: String
}
`
      }
    